import { Inject, Injectable, Logger } from '@nestjs/common';
import { UserRepository } from '@Database/repositories/user.repository';
import { AdresseRepository } from '@Database/repositories/adresse.repository';
import { EntrepriseRepository } from '@Database/repositories/entreprise.repository';
import { ClientProxy } from '@nestjs/microservices';
import { randomBytes } from 'crypto';
import * as bcrypt from 'bcryptjs';

export interface AdresseParams {
  type: string;
  ligne1: string;
  ligne2?: string;
  codePostal: string;
  ville: string;
  pays: string;
}

export interface EntrepriseParams {
  nom: string;
  siret?: string;
  adresse?: any;
  contactEmail?: string;
  contactTelephone?: string;
}

export interface CreateUserParams {
  nom: string;
  prenom: string;
  email: string;
  telephone?: string;
  role: string;
  statut?: string;
  tenantId?: string;
  adresse?: AdresseParams;
  entreprise?: EntrepriseParams;
  type?: string;
}

@Injectable()
export class CreateUserUseCase {
  private readonly logger = new Logger(CreateUserUseCase.name);

  constructor(
    private readonly userRepository: UserRepository,
    @Inject('MAILER_SERVICE') private readonly mailerClient: ClientProxy,
    private readonly adresseRepository: AdresseRepository,
    private readonly entrepriseRepository: EntrepriseRepository,
  ) {}

  async execute(data: CreateUserParams) {
    this.logger.log(`üîç [CreateUserUseCase] D√©but cr√©ation utilisateur: ${data.email}`);
    this.logger.log(`üìã [CreateUserUseCase] Donn√©es re√ßues: ${JSON.stringify(data)}`);

    try {
      // V√©rifier si l'utilisateur existe d√©j√†
      this.logger.log(`üîç [CreateUserUseCase] V√©rification existence email: ${data.email}`);
      const existingUser = await this.userRepository.findByEmail(data.email);
      if (existingUser) {
        this.logger.warn(`‚ö†Ô∏è [CreateUserUseCase] Utilisateur d√©j√† existant: ${data.email}`);
        throw new Error(`Un utilisateur avec l'email ${data.email} existe d√©j√†.`);
      }
      this.logger.log(`‚úÖ [CreateUserUseCase] Email disponible`);

      // V√©rifier si le t√©l√©phone existe d√©j√† (si fourni)
      if (data.telephone) {
        this.logger.log(`üîç [CreateUserUseCase] V√©rification existence t√©l√©phone: ${data.telephone}`);
        const existingPhone = await this.userRepository.findByPhone(data.telephone);
        if (existingPhone) {
          this.logger.warn(`‚ö†Ô∏è [CreateUserUseCase] T√©l√©phone d√©j√† existant: ${data.telephone}`);
          throw new Error(`Un utilisateur avec le t√©l√©phone ${data.telephone} existe d√©j√†.`);
        }
        this.logger.log(`‚úÖ [CreateUserUseCase] T√©l√©phone disponible`);
      }

      // G√©n√©ration du token d'invitation et mot de passe temporaire
      this.logger.log(`üîê [CreateUserUseCase] G√©n√©ration token d'invitation et mot de passe temporaire`);
      const invitationToken = randomBytes(20).toString('hex');
      const tempPassword = randomBytes(16).toString('hex');
      const hashMotDePasse = await bcrypt.hash(tempPassword, 10);
      
      this.logger.log(`‚úÖ [CreateUserUseCase] Hash g√©n√©r√© avec succ√®s`);

      let entrepriseId: string | undefined = undefined;
      
      // Cr√©ation de l'entreprise si fournie
      if (data.entreprise) {
        this.logger.log(`üè¢ [CreateUserUseCase] Cr√©ation entreprise: ${JSON.stringify(data.entreprise)}`);
        try {
          const entreprise = await this.entrepriseRepository.create({
            nom: data.entreprise.nom,
            siret: data.entreprise.siret,
            adresse: data.entreprise.adresse ? JSON.stringify(data.entreprise.adresse) : null,
            contactEmail: data.entreprise.contactEmail,
            contactTelephone: data.entreprise.contactTelephone,
            dateCreation: new Date(),
          });
          entrepriseId = entreprise.id;
          this.logger.log(`‚úÖ [CreateUserUseCase] Entreprise cr√©√©e avec ID: ${entrepriseId}`);
        } catch (error) {
          this.logger.error(`‚ùå [CreateUserUseCase] Erreur cr√©ation entreprise: ${error.message}`, error.stack);
          throw new Error(`Erreur lors de la cr√©ation de l'entreprise: ${error.message}`);
        }
      }

      // Cr√©ation de l'utilisateur
      this.logger.log(`üë§ [CreateUserUseCase] Cr√©ation utilisateur en base`);
      const userData = {
        nom: data.nom,
        prenom: data.prenom,
        email: data.email,
        role: data.role as any,
        telephone: data.telephone ?? null,
        hashMotDePasse,
        tenantId: data.tenantId ?? '',
        statut: (data.statut as ('EN_ATTENTE_VALIDATION' | 'ACTIF' | 'SUSPENDU' | 'BLACKLISTE' | 'ARCHIVE' | 'SUPPRIME')) ?? 'EN_ATTENTE_VALIDATION',
        activationToken: invitationToken,
        proprietaireEntrepriseId: entrepriseId,
      };
      
      this.logger.log(`üìù [CreateUserUseCase] Donn√©es utilisateur: ${JSON.stringify(userData)}`);
      
      const user = await this.userRepository.create(userData);
      this.logger.log(`‚úÖ [CreateUserUseCase] Utilisateur cr√©√© avec ID: ${user.id}`);

      // Cr√©ation de l'adresse si fournie
      if (data.adresse) {
        this.logger.log(`üìç [CreateUserUseCase] Cr√©ation adresse: ${JSON.stringify(data.adresse)}`);
        try {
          await this.adresseRepository.create({
            utilisateurId: user.id,
            ...data.adresse,
          });
          this.logger.log(`‚úÖ [CreateUserUseCase] Adresse cr√©√©e avec succ√®s`);
        } catch (error) {
          this.logger.error(`‚ùå [CreateUserUseCase] Erreur cr√©ation adresse: ${error.message}`, error.stack);
          // On ne fait pas √©chouer la cr√©ation d'utilisateur si l'adresse √©choue
          this.logger.warn(`‚ö†Ô∏è [CreateUserUseCase] Utilisateur cr√©√© mais adresse non cr√©√©e`);
        }
      }

      // Envoi de l'email d'invitation
      this.logger.log(`üìß [CreateUserUseCase] Envoi email d'invitation √†: ${user.email}`);
      try {
        this.mailerClient.emit('user.invite', {
          to: user.email,
          firstname: user.prenom,
          token: invitationToken,
        });
        this.logger.log(`‚úÖ [CreateUserUseCase] Email d'invitation envoy√©`);
      } catch (error) {
        this.logger.error(`‚ùå [CreateUserUseCase] Erreur envoi email: ${error.message}`, error.stack);
        // On ne fait pas √©chouer la cr√©ation si l'email √©choue
        this.logger.warn(`‚ö†Ô∏è [CreateUserUseCase] Utilisateur cr√©√© mais email non envoy√©`);
      }

      this.logger.log(`üéâ [CreateUserUseCase] Cr√©ation utilisateur termin√©e avec succ√®s: ${user.email}`);
      return user;
      
    } catch (error) {
      this.logger.error(`üí• [CreateUserUseCase] Erreur fatale: ${error.message}`, error.stack);
      throw error;
    }
  }
} 