name: Selective Microservice Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'services/**'
      - 'frontend/**'
      - 'k8s/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.services }}
      frontend: ${{ steps.filter.outputs.frontend }}
      k8s: ${{ steps.filter.outputs.k8s }}
      changed_services: ${{ steps.detect-changed.outputs.changed_services }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper change detection
      
      - name: Filter changed files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            auth-service:
              - 'services/auth-service/**'
            api-gateway:
              - 'services/api-gateway/**'
            contrat-service:
              - 'services/contrat-service/**'
            facture-service:
              - 'services/facture-service/**'
            intervention-service:
              - 'services/intervention-service/**'
            mailer-service:
              - 'services/mailer-service/**'
            operation-service:
              - 'services/operation-service/**'
            workflow-service:
              - 'services/workflow-service/**'
            frontend:
              - 'frontend/**'
            k8s:
              - 'k8s/**'
            services:
              - 'services/**'
      
      - name: Detect changed services
        id: detect-changed
        run: |
          CHANGED_SERVICES=[]
          
          # Check which services changed
          if [[ "${{ steps.filter.outputs.auth-service }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["auth-service"]')
          fi
          if [[ "${{ steps.filter.outputs.api-gateway }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["api-gateway"]')
          fi
          if [[ "${{ steps.filter.outputs.contrat-service }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["contrat-service"]')
          fi
          if [[ "${{ steps.filter.outputs.facture-service }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["facture-service"]')
          fi
          if [[ "${{ steps.filter.outputs.intervention-service }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["intervention-service"]')
          fi
          if [[ "${{ steps.filter.outputs.mailer-service }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["mailer-service"]')
          fi
          if [[ "${{ steps.filter.outputs.operation-service }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["operation-service"]')
          fi
          if [[ "${{ steps.filter.outputs.workflow-service }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["workflow-service"]')
          fi
          if [[ "${{ steps.filter.outputs.frontend }}" == "true" ]]; then
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | jq '. += ["frontend"]')
          fi
          
          echo "Changed services: $CHANGED_SERVICES"
          echo "changed_services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
      
      - name: Debug changed paths
        run: |
          echo "Changed services: ${{ steps.filter.outputs.services_files }}"
          echo "Frontend changed: ${{ steps.filter.outputs.frontend }}"
          echo "K8s changed: ${{ steps.filter.outputs.k8s }}"
          echo "Services to rebuild: ${{ steps.detect-changed.outputs.changed_services }}"

  build-and-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.services == 'true' || needs.detect-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [
          'auth-service',
          'api-gateway',
          'contrat-service',
          'facture-service',
          'intervention-service',
          'mailer-service',
          'operation-service',
          'workflow-service',
          'frontend'
        ]
    
    env:
      REGISTRY: registry.digitalocean.com/aquaerp-registry
      IMAGE_TAG: ${{ github.sha }}
    
    steps:
      - name: Check if service changed
        id: check-service
        run: |
          CHANGED_SERVICES='${{ needs.detect-changes.outputs.changed_services }}'
          if [[ $CHANGED_SERVICES == *"${{ matrix.service }}"* ]]; then
            echo "Service ${{ matrix.service }} changed, will build and push"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Service ${{ matrix.service }} not changed, skipping"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout code
        if: steps.check-service.outputs.changed == 'true'
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        if: steps.check-service.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DigitalOcean Container Registry
        if: steps.check-service.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push service image
        if: steps.check-service.outputs.changed == 'true'
        run: |
          echo "Building ${{ matrix.service }}..."
          
          # DÃ©terminer le chemin du Dockerfile
          if [[ "${{ matrix.service }}" == "frontend" ]]; then
            DOCKERFILE_PATH="frontend/Dockerfile"
          else
            DOCKERFILE_PATH="services/${{ matrix.service }}/Dockerfile"
          fi
          
          # Build et push de l'image
          docker build --platform linux/amd64 \
            -t $REGISTRY/${{ matrix.service }}:$IMAGE_TAG \
            -t $REGISTRY/${{ matrix.service }}:latest \
            -f $DOCKERFILE_PATH .
          
          echo "Pushing ${{ matrix.service }}..."
          docker push $REGISTRY/${{ matrix.service }}:$IMAGE_TAG
          docker push $REGISTRY/${{ matrix.service }}:latest
          
          echo "${{ matrix.service }} build and push completed successfully"

  deploy:
    needs: [detect-changes, build-and-push]
    if: ${{ always() && (needs.detect-changes.outputs.services == 'true' || needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.k8s == 'true') }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Kubeconfig
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      
      - name: Save kubeconfig
        run: doctl kubernetes cluster kubeconfig save factu
      
      - name: Update Kubernetes manifests to use the correct registry
        run: |
          echo "Updating Kubernetes manifests to use the correct registry"
          find k8s -type f -name "*.yaml" -exec sed -i 's|docker.io/yassblh|registry.digitalocean.com/aquaerp-registry|g' {} \;
      
      - name: Apply k8s configurations if changed
        if: ${{ needs.detect-changes.outputs.k8s == 'true' }}
        run: |
          echo "Applying Kubernetes configurations"
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/services/
          kubectl apply -f k8s/postgresql/
          kubectl apply -f k8s/frontend.yaml
          kubectl apply -f k8s/ingress.yaml
      
      - name: Restart only changed deployments
        if: ${{ needs.detect-changes.outputs.services == 'true' || needs.detect-changes.outputs.frontend == 'true' }}
        run: |
          CHANGED_SERVICES='${{ needs.detect-changes.outputs.changed_services }}'
          
          for SERVICE in $(echo $CHANGED_SERVICES | jq -r '.[]'); do
            echo "Restarting $SERVICE deployment"
            kubectl rollout restart deployment/$SERVICE -n aquaerp
          done
