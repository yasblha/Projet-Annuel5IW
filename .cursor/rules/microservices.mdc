---
description: >
alwaysApply: false
---
## Architecture

- Microservices written in **NestJS** with a **Vue 3** frontend (README).
- **Domain-Driven Design**, **CQRS**, repository and use‑case patterns.
- Services communicate by **RabbitMQ** events.
- Database access through **Sequelize** models and migrations.

### Standard Project Layout
services/<name>-service/
src/
application/ # Usecases, services, validators
domain/ # Entités métier et erreurs
infrastructure/ # Adapters, config, events, guards, logger
main.ts # Entrée NestJS
Database/ # Modèles, migrations, repositories partagés
frontend/src/ # Vue components, views, stores, services

markdown
Copier

## Coding Standards

- **TypeScript strict mode** with ESLint/Prettier.
- Prettier uses *single quotes* and *trailing commas* (`.prettierrc`).
- `.eslintrc.js` extends `@typescript-eslint/recommended` and `plugin:prettier/recommended`.
- Organize backend logic into use cases with repositories for data access.

## Commit & PR Guidelines

- Use conventional commit messages (feat:, fix:, docs:, refactor:, test:…).
- Keep commits focused; describe the implemented change clearly.
- Provide a descriptive PR body referencing the feature or fix.

## Development Workflow

1. Install dependencies: `npm install`.
2. Implement code in the corresponding microservice or frontend module.
3. Run `npm run lint` and `npm run test` (plus `npm run test:e2e` if available).
4. Commit using conventional messages.
5. Open a PR with a clear summary.

## Backend

- Each microservice replicates the structure shown above.
- Migrations and models live in `Database/` or in each service’s `src/infrastructure/database`.
- Use NestJS modules to inject services (e.g., a `NumberGenerator` service for contract numbering).
- Keep business logic in `application/usecases`, invoked via controllers.

## Frontend

- Vue 3 with `<script setup lang="ts">`.
- Components reside under `src/components`; pages in `src/views`; API calls in `src/services`.
- Use Pinia stores in `src/stores`.
- Tailwind for styling; keep components small and focused.

## Configuration & Environment

- Example variables in README show default ports and env names (Postgres, RabbitMQ, JWT, etc.).
- Use `Docker Compose` to run all services locally (`docker compose up -d --build`).

## Testing & Quality

- Unit tests via `npm run test`.
- Integration (e2e) tests via `npm run test:e2e` where defined.
- Linting with `npm run lint`.
- Build with `npm run build`.

## Example Numbering Feature (Contrat-Service)

- Implement a `NumberGenerator` service to create contract numbers (`C-<zone>-<year>-<seq>`).
- Inject the service into `ContratModule` and call it in use cases (e.g., finalize contract).
- Optionally generate meter IDs with `M-<zone>-<type>-<serial>`.

Follow these rules to maintain coherence across the backend microservices and the Vue frontend while contributing new features or fixes.

---